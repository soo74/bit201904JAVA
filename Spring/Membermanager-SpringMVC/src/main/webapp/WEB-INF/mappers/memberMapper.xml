<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 는 필수 속성이다. : dao 식별하기위한 이름 -->
<mapper namespace="com.bitcamp.mm.member.dao.MemberDaoInterface"> <!-- namespace등록 -->

	<!-- select 결과 메핑을 위한 resultMap 설정 -->
	<resultMap id="resultMemberInfo" type="com.bitcamp.mm.member.domain.MemberInfo">  
		<id property="idx" column="idx"/>         <!-- idx는 프라이머리키, property는 memberInfo안의 변수, column은 member테이블 -->
		<result property="uId" column="uid"/>
		<result property="uPW" column="upw"/>
		<result property="uName" column="uname"/>
		<result property="uPhoto" column="uphoto"/>
		<result property="regDate" column="date"/>
		<result property="verify" column="verify" />
		<result property="code" column="code" />
	</resultMap>

<!-- 회원로그인 -->
<select id="selectMemberById" resultMap="resultMemberInfo">
	select * from member where uid=#{id}
</select>

<!-- 아이디 중복체크 -->
<select id="selectMemberById2" resultMap="resultMemberInfo">
	select * from member where uid=#{id}
</select>

<!-- 회원가입 -->
<insert id="insertMember" parameterType="com.bitcamp.mm.member.domain.MemberInfo">
	insert into member (uid, uname, upw, uphoto, code) values (#{uId},#{uName},#{uPW},#{uPhoto},#{code})
</insert>

<!-- 회원 정보 수정을 위한 정보 획득 -->
<select id="selectMemberByIdx" resultMap="resultMemberInfo">
	select * from member where idx=#{idx}
</select>

<!-- 회원정보수정 -->
<update id="memberUpdate" parameterType="com.bitcamp.mm.member.domain.MemberInfo">
	update member set uname=#{uName}, upw=#{uPW}, uphoto=#{uPhoto} where idx=#{idx}
</update>

<!-- 회원정보 삭제 -->
<delete id="memberDelete">
	delete from member where idx=#{idx}
</delete>

<!-- 회원 리스트의 개수 : 검색을 위해 동적쿼리 적용 -->
<select id="selectTotalCount" parameterType="com.bitcamp.mm.member.domain.SearchParam" resultType="int">
	select count(*) from member

	<where>
			<if test="stype != null">
				<if test="stype == 'both'">
						uid LIKE CONCAT('%',#{keyword},'%') or uname LIKE CONCAT('%',#{keyword},'%')
				</if>
				<if test="stype == 'id'">
						uid LIKE CONCAT('%',#{keyword},'%')
				</if>
				<if test="stype == 'name'">
						uname LIKE CONCAT('%',#{keyword},'%')
				</if>
			
			</if>
	</where>

</select>


<!-- 회원 리스트 : 검색을 위해 동적쿼리 적용 -->
<select id="selectList" parameterType="map" resultMap="resultMemberInfo">
SELECT * FROM member

	<where>
			<if test="search != null">                <!--  MemberListService의 search -->
				<if test="search.stype == 'both'">
					<include refid="whereId"/>
					<include refid="whereName"/>
					<!-- uid LIKE CONCAT('%', #{search.keyword}, '%') or uname LIKE CONCAT('%', #{search.keyword}, '%') -->
				</if>
				<if test="search.stype == 'id'">				
					<include refid="whereId"/>
					<!-- uid LIKE CONCAT('%', #{search.keyword}, '%') -->
				</if>
				<if test="search.stype == 'name'">
					<include refid="whereName"/>
					<!-- uname LIKE CONCAT('%', #{search.keyword}, '%') -->
				</if>
			</if>
		</where>
		
		limit #{index}, #{count}
</select>


<sql id="whereId">
	or uid LIKE CONCAT('%',#{keyword},'%')
</sql>

<sql id="whereName">
	uname LIKE CONCAT('%',#{keyword},'%')
</sql>


<!-- 전체 회원 리스트 구하기 -->
<select id="selectAllList" resultMap="resultMemberInfo">
	select * from member order by uname
</select>


<update id="verify">
	update member set verify='Y' where uid=#{param1} and code=#{param2}
</update>




</mapper>